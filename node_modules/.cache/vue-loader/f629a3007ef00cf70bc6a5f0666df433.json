{"remainingRequest":"/Users/alexmurinets/Desktop/crypto-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/alexmurinets/Desktop/crypto-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/alexmurinets/Desktop/crypto-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexmurinets/Desktop/crypto-frontend/src/views/pages/Login.vue?vue&type=template&id=07b13bd8&","dependencies":[{"path":"/Users/alexmurinets/Desktop/crypto-frontend/src/views/pages/Login.vue","mtime":1640599033690},{"path":"/Users/alexmurinets/Desktop/crypto-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1640435597749},{"path":"/Users/alexmurinets/Desktop/crypto-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640435599719},{"path":"/Users/alexmurinets/Desktop/crypto-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1640435597749},{"path":"/Users/alexmurinets/Desktop/crypto-frontend/node_modules/vue-loader/lib/index.js","mtime":1640435599191}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}