{"remainingRequest":"/Users/alexmurinets/Desktop/projects/mycrypto/crypto-frontend/node_modules/babel-loader/lib/index.js!/Users/alexmurinets/Desktop/projects/mycrypto/crypto-frontend/src/axios/AxiosService.js","dependencies":[{"path":"/Users/alexmurinets/Desktop/projects/mycrypto/crypto-frontend/src/axios/AxiosService.js","mtime":1640554445794},{"path":"/Users/alexmurinets/Desktop/projects/mycrypto/crypto-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1640435597749},{"path":"/Users/alexmurinets/Desktop/projects/mycrypto/crypto-frontend/node_modules/babel-loader/lib/index.js","mtime":1640435598834}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9hbGV4bXVyaW5ldHMvRGVza3RvcC9wcm9qZWN0cy9teWNyeXB0by9jcnlwdG8tZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9Vc2Vycy9hbGV4bXVyaW5ldHMvRGVza3RvcC9wcm9qZWN0cy9teWNyeXB0by9jcnlwdG8tZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvVXNlcnMvYWxleG11cmluZXRzL0Rlc2t0b3AvcHJvamVjdHMvbXljcnlwdG8vY3J5cHRvLWZyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL1VzZXJzL2FsZXhtdXJpbmV0cy9EZXNrdG9wL3Byb2plY3RzL215Y3J5cHRvL2NyeXB0by1mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMKaW1wb3J0IEF4aW9zIGZyb20gJ2F4aW9zJzsKCnZhciBBeGlvc1NlcnZpY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEF4aW9zU2VydmljZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBeGlvc1NlcnZpY2UpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAiYXBpIiwgQXhpb3MuY3JlYXRlKHsKICAgICAgYmFzZVVSTDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGknLAogICAgICB0aW1lb3V0OiAxMDAwMAogICAgfSkpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEF4aW9zU2VydmljZSwgW3sKICAgIGtleTogImxvZ2luIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfbG9naW4gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUodXNlcikgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuYXBpLnBvc3QoJ2F1dGgvbG9naW4nLCB1c2VyKSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBsb2dpbihfeCkgewogICAgICAgIHJldHVybiBfbG9naW4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGxvZ2luOwogICAgfSgpCiAgfSwgewogICAga2V5OiAicmVnaXN0ZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWdpc3RlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIodXNlcm5hbWUsIGVtYWlsLCBwYXNzd29yZCwgZmlyc3ROYW1lLCBsYXN0TmFtZSkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgdGhpcy5hcGkucG9zdCgnL3JlZ2lzdGVyJywgewogICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCwKICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLAogICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IGZpcnN0TmFtZSwKICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6IGxhc3ROYW1lCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyKF94MiwgX3gzLCBfeDQsIF94NSwgX3g2KSB7CiAgICAgICAgcmV0dXJuIF9yZWdpc3Rlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVnaXN0ZXI7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJnZXRBY2NvdW50U2V0dGluZ3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9nZXRBY2NvdW50U2V0dGluZ3MgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciB0b2tlbjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmFwaS5nZXQoIi91c2Vycy90b2tlbi8iLmNvbmNhdChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSksIHsKICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodG9rZW4pCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZ2V0QWNjb3VudFNldHRpbmdzKCkgewogICAgICAgIHJldHVybiBfZ2V0QWNjb3VudFNldHRpbmdzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBnZXRBY2NvdW50U2V0dGluZ3M7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJlZGl0QWNjb3VudERldGFpbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9lZGl0QWNjb3VudERldGFpbHMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KHVzZXJuYW1lLCBmaW8sIGVtYWlsLCBzdGF0dXMpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHRoaXMuYXBpLnBvc3QoJy9hY2NvdW50LXNldHRpbmdzJywgewogICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICAgIGZpbzogZmlvLAogICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsCiAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGVkaXRBY2NvdW50RGV0YWlscyhfeDcsIF94OCwgX3g5LCBfeDEwKSB7CiAgICAgICAgcmV0dXJuIF9lZGl0QWNjb3VudERldGFpbHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGVkaXRBY2NvdW50RGV0YWlsczsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImVkaXRQYXNzd29yZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2VkaXRQYXNzd29yZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUocGFzc3dvcmQsIHJlUGFzc3dvcmQpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIHRoaXMuYXBpLnBvc3QoJy9hY2NvdW50LXNldHRpbmdzL3Bhc3N3b3JkJywgewogICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsCiAgICAgICAgICAgICAgICAgIHJlUGFzc3dvcmQ6IHJlUGFzc3dvcmQKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1LCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZWRpdFBhc3N3b3JkKF94MTEsIF94MTIpIHsKICAgICAgICByZXR1cm4gX2VkaXRQYXNzd29yZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZWRpdFBhc3N3b3JkOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gQXhpb3NTZXJ2aWNlOwp9KCk7Cgp2YXIgYXhpb3NTZXJ2aWNlID0gbmV3IEF4aW9zU2VydmljZSgpOwpleHBvcnQgZGVmYXVsdCBheGlvc1NlcnZpY2U7"},{"version":3,"sources":["/Users/alexmurinets/Desktop/projects/mycrypto/crypto-frontend/src/axios/AxiosService.js"],"names":["Axios","AxiosService","create","baseURL","timeout","user","api","post","username","email","password","firstName","lastName","token","localStorage","getItem","get","headers","Authorization","fio","status","rePassword","axiosService"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,Y;;;;iCACED,KAAK,CAACE,MAAN,CAAa;AACjBC,MAAAA,OAAO,EAAE,2BADQ;AAEjBC,MAAAA,OAAO,EAAE;AAFQ,KAAb,C;;;;;;2EAKN,iBAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,iDACS,KAAKC,GAAL,CAASC,IAAT,CAAc,YAAd,EAA4BF,IAA5B,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8EAIA,kBAAeG,QAAf,EAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,SAA1C,EAAqDC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAKN,GAAL,CAASC,IAAT,CAAc,WAAd,EACL;AACEC,kBAAAA,QAAQ,EAARA,QADF;AAEEC,kBAAAA,KAAK,EAALA,KAFF;AAGEC,kBAAAA,QAAQ,EAARA,QAHF;AAIEC,kBAAAA,SAAS,EAATA,SAJF;AAKEC,kBAAAA,QAAQ,EAARA;AALF,iBADK,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;wFAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,KADR,GACgBC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADhB;AAAA,kDAGS,KAAKT,GAAL,CAASU,GAAT,wBAA6BF,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA7B,GAA8D;AAAEE,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,aAAa,mBAAYL,KAAZ;AAAf;AAAX,iBAA9D,CAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;wFAMA,kBAAyBL,QAAzB,EAAmCW,GAAnC,EAAwCV,KAAxC,EAA+CW,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAKd,GAAL,CAASC,IAAT,CAAc,mBAAd,EAAmC;AACxCC,kBAAAA,QAAQ,EAARA,QADwC;AAExCW,kBAAAA,GAAG,EAAHA,GAFwC;AAGxCV,kBAAAA,KAAK,EAALA,KAHwC;AAIxCW,kBAAAA,MAAM,EAANA;AAJwC,iBAAnC,EAKJ;AACDH,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,aAAa,mBAAYJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AADN;AADR,iBALI,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAaA,kBAAmBL,QAAnB,EAA6BW,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAKf,GAAL,CAASC,IAAT,CAAc,4BAAd,EAA4C;AACjDG,kBAAAA,QAAQ,EAARA,QADiD;AAEjDW,kBAAAA,UAAU,EAAVA;AAFiD,iBAA5C,EAGJ;AACDJ,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,aAAa,mBAAYJ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AADN;AADR,iBAHI,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AAYF,IAAMO,YAAY,GAAG,IAAIrB,YAAJ,EAArB;AACA,eAAeqB,YAAf","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport Axios from 'axios'\n\nclass AxiosService {\n  api = Axios.create({\n    baseURL: 'http://localhost:8080/api',\n    timeout: 10000,\n  })\n\n  async login(user) {\n    return this.api.post('auth/login', user)\n  }\n\n  async register(username, email, password, firstName, lastName) {\n    return this.api.post('/register',\n      {\n        username,\n        email,\n        password,\n        firstName,\n        lastName,\n      })\n  }\n\n  async getAccountSettings() {\n    const token = localStorage.getItem('token')\n\n    return this.api.get(`/users/token/${localStorage.getItem('token')}`, { headers: { Authorization: `Bearer ${token}` } })\n  }\n\n  async editAccountDetails(username, fio, email, status) {\n    return this.api.post('/account-settings', {\n      username,\n      fio,\n      email,\n      status,\n    }, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\n      },\n    })\n  }\n\n  async editPassword(password, rePassword) {\n    return this.api.post('/account-settings/password', {\n      password,\n      rePassword,\n    }, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\n      },\n    })\n  }\n}\n\nconst axiosService = new AxiosService()\nexport default axiosService\n"]}]}